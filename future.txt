tw2.core
    csrf protection
    detect attempts to modify a widget instance and raise exception
    csslink auto module name
    id as default param to Widget.__init__
    configurable compound id separator
    avoid so many subclasses being created - inplace addition of parent (but this is harder than I thought)
    params - find a neater way to break param descriptions across lines
    i18n - where to call it?
    use quotes in all exceptions
    logging - not much to log, but tw has some useful debug info
    do __repr__ functions better
    make pkg_resources a soft dependence
    force ids to begin with a letter
    Support "paste.filter_app_factory" entry point
    better way to do "extra children" - Form.submit is a bit of a hack
        don't collect widgets as params? (but do if its id=)
    move attr generation to display? would make some other bits easier
    rename fetch_data to view_request (also: post_define to define?)

tw2.forms
    stop label names being post-to-able
    booleanradiobuttonlist
        instead? twf.RadioButtonTable(options=twf.BooleanOptions)
    make selection_list and selection_table support grouping
    make selection table configurable how it arranges (horiz/vert)
    named buttons
    form id - ${child.id}:_form
    TableForm - make TableLayout parameters accessible?
    SSF - do adding an empty row, at post_define time, when possible
    datagrid
        you can do pretty well with GridLayout and LabelField - is this necessary?
    select fields - strong validation

unit tests
    tw2.core needs lots of unit tests
        validators - doc tests?
        nick more tests from tw1, e.g. leaks
        WidgetTestCase

    tw2.forms
        unit test server-side logic
        test app for widget usability

validation
    client-side
    inheriting required, encoding
        global config for encoding would be a start

widget browser
    lightweight tab-switcher - no ajax to start with
        Summary / Demo Source / Parameters / Source / Template
    sphinx integration
    browse other things in packages - validators, exceptions, etc.

controllers
    security
    switcher
    serving with paste and restart
    transactional middleware

template
    mako helper functions
    multiple templates for widget (different engines)
    cacheing
    inline templates
    disable kid's doctype header on inner widgets
    only test engines that are installed
    pass config to templates
        absolute paths (e.g. genshi_abs)
        output format
        safe vars
        extra vars
        -> to do a proper job of this, I have to find out what the options are for each template engine
    genshi template optimiser

resources
    optimisation
    paste command to grab resources, for serving with a web server
    'afterwidget' as a location?

django
jquery, mochikit, dojo, yui
cool new and different widgets - popup links, photos

dynforms
    cascading
        this is where I need to think about ajax properly, which needs client validation
        There's some general things for all ajax requests
            extra - siblings (parent?) of this widget, include value in req

    look at jquery / dojo first
        filtering grid
        ajax lookup
        hiding button

    growing
        growing repeater
        calling a js func to initialise a widget
            need to hook this for growing
        repeater
            if(x[i].tagName == 'LEGEND') x[i].innerHTML = x[i].innerHTML.replace('$$', number+1);
        make it not depend on customisedform
    customisedform - save prompt
    HidingComponentMixin - has JS optimisation that should be on general resources
    Consider HidingComponent, CascadingComponent as a display-only widget
    linkcontainer - popup links
    hiding, linkcontainer - better support the back button


frameworks
    pylons / tg2
        @validate decorator
    cp3


sqlalchemy
    db migration
        | [4] http://code.google.com/p/sqlalchemy-migrate/
        | [5] http://trac.ollix.org/miruku/
    elixir sessions

    get a simple form working
    lists
    fkeyselect
    Relations
        skip cols for MTO relations
        MTO
            view - label
            edit - select / ajax

    how to update
        updating A with B
        if B is AutoField
            update A with params B has specified
        else
            update B with params A has specified and B not *** this sounds like trouble!
            ok, for now just use B, any param set to auto is taken from A

    later
        generic function
        OneToMany - list inline, with add and delete
        ManyToMany - CheckBoxList (or growing with ajax)
