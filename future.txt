tw2.core
    children_deep / _sub_compound
    set id on class to class name (rewritten?)
    detect attempts to modify a widget instance
    csslink auto module name
    id as default param to Widget.__init__?
    configurable compound id separator [but this is global]
    avoid so many subclasses being created - inplace addition of parent (but this is harder than I thought)
    params - find a neater way to break param descriptions across lines
    params - remove default attribute altogether?
    i18n - where to call it?
    resources - dynamic js calls
    use quotes in all exceptions
    logging - not much to log, but tw has some useful debug info
    do __repr__ functions better
    make pkg_resources a soft dependence
    force ids to begin with a letter

tw2.forms
    stop label names being post-to-able
    booleanradiobuttonlist
        instead? twf.RadioButtonTable(options=twf.BooleanOptions)
    make selection_list and selection_table support grouping
    make selection table configurable how it arranges (horiz/vert)
    unit tests - what can be done?
    named buttons
    form id - ${child.id}:_form
    TableForm - make TableLayout parameters accessible?

unit tests
    validators - doc tests?
    test compound id with deeply nested widgets
    nick more tests from tw1, e.g. leaks
    WidgetTestCase

validation
    inheriting required, encoding
    non-safe widgets - most resources are non-safe

widget browser
    sphinx integration
        widget browser just displays each registered package's sphinx docs
        it has a sphinx extension for embedding widgets
        links from parameters to bits of documentation (even across packages)

template
    mako helper functions
    multiple templates for widget (different engines)
    cacheing
    inline templates
    disable kid's doctype header on inner widgets
    only test engines that are installed
    pass config to templates
        absolute paths (e.g. genshi_abs)
        output format
        safe vars
        extra vars
        -> to do a proper job of this, I have to find out what the options are for each template engine
    genshi template optimiser

resources
    optimisation
    paste command to grab resources, for serving with a web server
    'afterwidget' as a location?

django
jquery, mochikit, dojo, yui
cool new and different widgets - popup links, photos

sqlalchemy
    generic function
    OneToMany - list inline, with add and delete
    ManyToMany - CheckBoxList (or growing with ajax)


dynforms
    cascading
    ajax lookup
    filtering grid
    hiding button

    growing
        repeater
        if(x[i].tagName == 'LEGEND') x[i].innerHTML = x[i].innerHTML.replace('$$', number+1);
        initialise controls
    HidingComponentMixin - has JS optimisation that should be on general resources
    hidingbutton
        for(var i = 0; i < x.length; i++)
            if(x[i].tagName == 'IMG' && x[i].src.indexOf('/show.png')) x[i].style.display = '';
    grandchild hiding
    There's some general things for all ajax requests
        extra - siblings (parent?) of this widget, include value in req
    Consider HidingComponent, CascadingComponent as a display-only widget
    linkcontainer - popup links
