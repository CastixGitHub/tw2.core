

Changes email
    Unicode refactor - issue 62


Select refactor
    new unit tests, update documentation

    later:
        separate SingleSelectionField, MultipleSelectionField
        change default_selected
            this for doing things like:
            "--- select value below ---"
    

tw2.sqla

    unit test RelatedValidator

    DbFormPage
        avoid hardcoded id
        robust against bad id
        avoid elixir dependency
        unit test


    later:
        efficiency concerns with saving M:M (ask on sa list)
            http://groups.google.com/group/sqlalchemy/browse_thread/thread/fa5df9a15b27e877
        eager loader?
            only a major concern if there are multiple levels of repeater

    some support for (later)
        -> these shouldn't be part of tw2.sqla
        in widget libraries, if a widget could benefit from database integration, the developer:
            MUST include a base widget with no integration
            SHOULD include a widget with SQLAlchemy integration
            MAY include widgets with any other database integration            

        FilteringGrid
        OtherSingleSelectField
        AjaxLookup

    schema evolution - migrate
        migrate seems to have come to life again!



http://groups.google.com/group/turbogears-trunk/browse_thread/thread/3b3fff3dadd0b1e5
    Paste XSS issue
    
http://groups.google.com/group/turbogears-trunk/browse_thread/thread/ec921035779324e9
    Genshi now unmaintained?!?


notes from tsrgen2
    tw2.forms: allow title to be a template    
    FormPage redirect - flexibility to include id

    calling super classes can get messy 
        if you copy and paste a method, have to change super calls
        doesn't work neatly for a class defined inline
        -> solution is Python 3


http://www.facebook.com/alteris.ian - doing exactly the kind of work I'm interested in



tw2.core
    Label("mylabel", label_text=Markup("<a href='http://www.google.com'>Google</a>"))
    make pkg_resources a soft dependency
    csrf protection
    avoid so many subclasses being created - inplace addition of parent (but this is harder than I thought)
    detect attempts to modify a widget instance and raise exception
    params - find a neater way to break param descriptions across lines
    i18n - where to call it?
    use quotes in all exceptions, also inclue widget id?
    logging - not much to log, but tw has some useful debug info
    Support "paste.filter_app_factory" entry point
    move attr generation to display? would make some other bits easier
    rename fetch_data to view_request? (also: post_define to define?)
    capitals for name2label - ID, IP, URL
    make resource injector work correctly with pylons cacheing
    nick more unit tests from tw1, e.g. leaks
    RepeatingWidget.rwbc is a bit of a hack - any improvements? may not be a problem, rarely need to call

tw2.forms
    stop label names being post-to-able
    booleanradiobuttonlist
        instead? twf.RadioButtonTable(options=twf.BooleanOptions)
    make selection_list and selection_table support grouping
    make selection table configurable how it arranges (horiz/vert)
    named buttons
    TableForm - make TableLayout parameters accessible?
    SSF - do adding an empty row, at post_define time, when possible
    datagrid
        you can do pretty well with GridLayout and LabelField - is this necessary?
    select fields - strong validation

validation
    client-side
    inheriting required

run the w3c validator on all the widgets

widget browser
    more detail - need tabs (no ajax to start with)
        Summary / Demo Source / Parameters / Source / Template
    sphinx integration

controllers
    security
    switcher

template
    inline templates
    disable kid's doctype header on inner widgets
    only test engines that are installed
    pass config to templates
        absolute paths (e.g. genshi_abs)
        output format
        safe vars
        extra vars
        -> to do a proper job of this, I have to find out what the options are for each template engine
    template optimiser

resources
    optimisation - use Diez's work
    paste command to grab resources, for serving with a web server
    'afterwidget' as a location?

new widgets
    jquery
    popup links

dynforms
    dyndemo
    cascading
        this is where I need to think about ajax properly, which needs client validation
        There's some general things for all ajax requests
            extra - siblings (parent?) of this widget, include value in req

    look at js libs first
        filtering grid
        hiding button

    growing
        growing repeater
            putting numbers in legends
        calling a js func to initialise a widget
            need to hook this for growing
        make it not depend on customisedform

    growingtextarea
    text field with suggestion
    wymeditor?
    customisedform - save prompt
    HidingComponentMixin - has JS optimisation that should be on general resources
    Consider HidingComponent, CascadingComponent as a display-only widget
    text input mask - http://deformdemo.repoze.org/text_input_masks/


frameworks
    pylons
    tg2 - basically working
    cp3
    repoze.bfg
    django


http://www.mongodb.org/

yui
    use percious approach for multiple lib versions
    allow multiple DataSource widgets on one page
    move script out of templates - just use PlainWidget for most of them
        this depends a lot on the growing work

    rename options? it clashes with SelectionField.options
    autocomplete: experiment with force_select
    container - dialogs, tooltips
    Menu
    Paginator
    ImageCropper
    carousel - picking images
    Resize
    YUI CSS base




class OtherSingleSelectField(twc.CompoundWidget, HidingContainerMixin):
    """A SingleSelectField that has "Other" as an option. If a user selects "Other", they are prompted to enter a text string. Users of the widget must define a :meth:`create_code` method that takes the user-supplied text, and allocates a new code."""
    template = "genshi:tw2.dynforms.templates.other_select_field"

    # TBD:
    #other_validator = twc.Param('The validator to use for text entered in the "please specify" box.')

    other_code = twc.Param('The code used for "other"; occasionally you may need to override the default to avoid a clash with a valid value.', default=10000)
    other_text = twc.Param('The text string display for the "other" choice.', default='Other')
    specify_text = twc.Param('The text string display to prompt for a text value.', default='Please specify:')
    options = twc.Param('Options to be displayed', default=[])

    children = [
        HidingSingleSelectField(id='select', mapping = {}, options=[]), # TBD
        twf.TextField(id='other'),
    ]        

    @classmethod
    def post_define(cls):
        1 #cls.options.append((cls.other_code, cls.other_text))
        #cls.children[0].mapping = {cls.other_code: ['other']}

    def prepare(self):
        self.c.select.value = self.value
        self.c.select.options = self.options
