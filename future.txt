widgets as controllers
    security
    switcher
    csrf

tw2.core
    set id on class to rewritten class name (maybe just Page subclasses)
    detect attempts to modify a widget instance
    csslink auto module name
    id as default param to Widget.__init__?
    configurable compound id separator [but this is global]
    avoid so many subclasses being created - inplace addition of parent (but this is harder than I thought)
    params - find a neater way to break param descriptions across lines
    params - remove default attribute altogether?
    i18n - where to call it?
    resources - dynamic js calls
    use quotes in all exceptions
    logging - not much to log, but tw has some useful debug info
    do __repr__ functions better
    make pkg_resources a soft dependence

tw2.forms
    selectionfield - auto item_validator
    stop label names being post-to-able
    booleanradiobuttonlist
        instead? twf.RadioButtonTable(options=twf.BooleanOptions)
    make selection_list and selection_table support grouping
    make selection table configurable how it arranges (horiz/vert)
    unit tests - what can be done?
    named buttons
    datagrid
    form id - ${child.id}:_form
    TableForm - how to make TableLayout parameters accessible?

unit tests
    validators - doc tests?
    children_deep / _sub_compound
    test compound id with deeply nested widgets
    nick more tests from tw1, e.g. leaks
    WidgetTestCase

widget browser
    sphinx integration
        widget browser just displays each registered package's sphinx docs
        it has a sphinx extension for embedding widgets
        links from parameters to bits of documentation (even across packages)
    avoid the dodgy '.samples' entrypoint
    use paste web server?
    lightweight tab-switcher - no ajax to start with
        Summary / Demo Source / Parameters / Source / Template


genshi template optimiser
    this reduces things to one template per page in most circumstances
    for compound
        look for py:for
        if it's "var in s.c(hildren)?"
        then unroll to a series of
        <with "var = s.c[0]">...<with> blocks
        in each block, ${var.display()}
        can be replaced with the template,
        surrounded by a with block

        also
        ${s.c(hildren).var.display()} can be optimised
        or s.c[1].display()
    for repeater, it's
        var in s.c - loop is not unrolled
        but inside it, var.display is replaced
        also, s.c[1].display is done


validation
    client-side
    MatchField
    make msg dict more global
    inheriting required, encoding
    non-safe widgets - most resources are non-safe

template
    mako helper functions
    multiple templates for widget (different engines)
    cacheing
    inline templates
    disable kid's doctype header on inner widgets
    only test engines that are installed
    pass config to templates
        absolute paths (e.g. genshi_abs)
        output format
        safe vars
        extra vars
        -> to do a proper job of this, I have to find out what the options are for each template engine

resources
    expires header
    optimisation
    proper web server - paste command to grab resources
    refactor resources a bit - at the minute, location only takes affect when you reference a resource within a resources tag; not when you display directly. maybe this is ok.
    do we want 'afterwidget' as a location?

django


Database Widgets
----------------

DatabaseForms
    lists
    forms & posting
        make forms smarter about their action (closewindow, etc.)
    autoforms, autolist
    fkeyselect
        how to merge nicely with tw.forms?
        try to avoid inheritence, something more like
            twf.CheckBoxList(options=twb.Options(db.Table))
            (although how you do validation this way is anyone's guess)

Auto Forms

Take a model class and produces a form
Do this in accordance with a policy - users can define own policies
Allow hints on the model class (but don't overdo it)
And allow per-field hints on the form


dynforms
--------

First cut (no ajax):
    calendar
    growing
    hiding
    linkcontainer
    customisedform

Second:
    cascading
    leave ajax lookup and filtering grid in, but without db dependence


CustomisedForm - need submit_attrs on Form
hiding - grandchild hiding will work differently
HidingComponentMixin - has JS optimisation that should be on general resources
There's some general things for all ajax requests
    extra - siblings (parent?) of this widget, include value in req
need to refactor validation of writeonlytextfield
general issue of passing configuration to a validator
    compoundwidget.validate should have a marker that means "don't include in dict"

Ok, general problem, we want to add functionality to a set of widgets
    e.g. Hiding, Cascading
    Could have HidingComponent as a display-only widget

    myfield = twd.HidingComponent(child=twf.SingleSelectField(...), mapping={})
    hmmm, hiding integrates with each control a bit too much for this
    -> for now, lets just leave as-is


jquery, mochikit, dojo, yui
cool new and different widgets - popup links, photos
