widgets as controllers
    security
    switcher
    csrf

declarative
    set id on class to rewritten class name
    ** maybe this should just apply to page subclasses


tw2.core
    detect attempts to modify a widget instance
    csslink auto module name isn't working - can't easily fix, remove
    id as default param to Widget.__init__
        override __init__ to change default parameter?
            and make id the top default parameter

tw2.forms
    selectionfield - auto item_validator
    stop label names being post-to-able
    booleanradiobuttonlist
        instead? twf.RadioButtonTable(options=twf.BooleanOptions)
    make selection_list and selection_table support grouping
    make selection table configurable how it arranges (horiz/vert)
    unit tests - what can be done?
    named buttons
    datagrid
    form id - ${child.id}:_form

config
    configurable compound id separator [but this is global]

TableForm - how to make TableLayout parameters accessible?
Params - remove default attribute altogether?
avoid so many subclasses being created - inplace addition of parent (but this is harder than I thought)

more unit tests
    validators - doc tests?
    children_deep / _sub_compound
    test compound id with deeply nested widgets

django


widget browser
    sphinx integration
        widget browser just displays each registered package's sphinx docs
        it has a sphinx extension for embedding widgets
        links from parameters to bits of documentation (even across packages)


    need to look on inet:
        use setuptools better - need to understand entrypoints more
            update samples.py in paste template
            http://peak.telecommunity.com/DevCenter/PythonEggs#accessing-package-resources

    use paste web server?

    more detail:
        full params list
        demo source
        source
        template
        -> I want a lightweight tab-switcher - no ajax to start with
            onclick - do thing (id, subid):
                clear old (hide all id children)
                if loaded, display (show id_subid)
                else ajax (url, subid) - url is generated to include id
                    need to pass arbitrary params to the ajax
            -> ok, ok this is doing widgets as controllers
                and scalaing is a consideration - don't really want to register a controller method for each repeating row.

            Summary / Demo Source / Parameters / Source / Template


genshi template optimiser
    this reduces things to one template per page in most circumstances
    for compound
        look for py:for
        if it's "var in s.c(hildren)?"
        then unroll to a series of
        <with "var = s.c[0]">...<with> blocks
        in each block, ${var.display()}
        can be replaced with the template,
        surrounded by a with block

        also
        ${s.c(hildren).var.display()} can be optimised
        or s.c[1].display()
    for repeater, it's
        var in s.c - loop is not unrolled
        but inside it, var.display is replaced
        also, s.c[1].display is done


validation
    client-side
    MatchField
    make msg dict more global
    inheriting required, encoding

template
    mako helper functions
    multiple templates for widget (different engines)
    cacheing
    inline templates
    disable kid's doctype header on inner widgets
    tests for jinja, myghty, breve
    only test engines that are installed
    pass config to templates
        absolute paths (e.g. genshi_abs)
        output format
        safe vars
        extra vars
        -> to do a proper job of this, I have to find out what the options are for each template engine

widget hierarchy
    compound repeating widget

parameters
    find a neater way to break param descriptions across lines

resources
    expires header
    optimisation
    proper web server - paste command to grab resources
    refactor resources a bit - at the minute, location only takes affect when you reference a resource within a resources tag; not when you display directly. maybe this is ok.

misc
    logging - not much to log, but tw has some useful debug info
    do __repr__ functions better
    make pkg_resources a soft dependence

unit tests
    nick more tests from tw1, e.g. leaks


Database Widgets
----------------

DatabaseForms
    lists
    forms & posting
        make forms smarter about their action (closewindow, etc.)
    autoforms, autolist
    fkeyselect
        how to merge nicely with tw.forms?
        try to avoid inheritence, something more like
            twf.CheckBoxList(options=twb.Options(db.Table))
            (although how you do validation this way is anyone's guess)

    db_ajax_forms
        where's logical to put this?
        perhaps in db_forms, but as soft dependency?


These are widgets that interact with the database. The following controller methods are used:

`Lists`
    Lists sublass DataGrid
    The controller loads data from the database and displays the widget.

`Forms`
    Forms use the controller method for two tasks:

     * Displaying the form
     * Receiving posted form data

    The same URL is used for both tasks; it displays on GET requests and receives on POST requests. Then same authorisation is done on each, as anyone who can view a form is authorised to POST to it. If you want a user to be able to view and not POST, you should display a view to that user, not a form.

    The posted form data is first validated. If it is invalid, the form is redisplayed with errors. If it is valid, the data is saved to the database, and the controller issues an HTTP redirect to a pre-configured URL.


**Auto Forms**

Take a model class and produce a form
Do this in accordance with a policy - users can define own policies
Allow hints on the model class (but don't overdo it)
And allow per-field hints on the form


dynforms
--------

First cut (no ajax):
    calendar
    growing
    hiding
    linkcontainer
    customisedform

Second:
    cascading
    leave ajax lookup and filtering grid in, but without db dependence


CustomisedForm - need submit_attrs on Form
hiding - grandchild hiding will work differently
HidingComponentMixin - has JS optimisation that should be on general resources
There's some general things for all ajax requests
    extra - siblings (parent?) of this widget, include value in req
need to refactor validation of writeonlytextfield
general issue of passing configuration to a validator
    compoundwidget.validate should have a marker that means "don't include in dict"

Ok, general problem, we want to add functionality to a set of widgets
    e.g. Hiding, Cascading
    Could have HidingComponent as a display-only widget

    myfield = twd.HidingComponent(child=twf.SingleSelectField(...), mapping={})
    hmmm, hiding integrates with each control a bit too much for this
    -> for now, lets just leave as-is


jquery, mochikit, dojo, yui
ajax_sa_forms
cool new and different widgets - popup links, photos
