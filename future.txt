Plan...
    TG2/TW2 tutorial
    widgetbrowser on tw.org
    tw2.sqla    
    
    merge percious' branch
    Standalone tutorial (?)
    improve 0.9 compat
        resource optimisation
    perf/mem benchmark
    auth* and general security
    client-side validation
    yui/jquery/etc


** I think there's an Elixir bug around specifying M:M table manually
mercurial - I'd like the ability to revert/commit individual changes


Hi,

I've made some good progress on tw2 in the past couple of weeks.

Validation has had minor changes and the documentation is improved. Unicode conversion is now done all at once, instead of one field at a time (ticket 62). State is now passed between validators; this has enabled a refactor of MatchValidator (ticket 18). Previously you applied it to a CompoundWidget and specified the two child widgets that needed to match. Now you apply it to a Widget, and specify the sibling widget it needs to match. It you're using MatchWidget, you'll need to update your code.

In tw2.forms, selection fields have been refactored. Previously, validation was applied even on validation failures; this is no longer the case. To make selection fields redisplay properly on failure, comparisons are done on Unicode objects. This behaviour has made it possible to implement more database functionality; it is not expect to break compatiblity. Also, the default_selected parameter is gone; it is now called prompt_text, and can be used to specify text in a selection field like "Please select an item".

Work has started on tw2.sqla, a layer like Rum and Sprox. This is highly experimental, but already useful for my own applications. Some documentation exists, although no tutorial.

An important job I will do soon is to merge my branches with Chris Perkin's. After that I plan to write some tutorials, and get the widget browser running on toscawidgets.org. Then it's probably time for another PyPI release.

I will be at EuroPython this coming week, and working on tw2. Is anyone else going?

Best wishes,

Paul



*** Tell people
    update docs on website
    send email

    

Make Page take charset from middleware
Compound validation - go back to using name???
tw2.core - unit test failure
move future.txt out of mercurial (to where? needs to work offline)
Make tw2.forms unit tests use genshi & mako


Select refactor    
    tidy/text prompt_text
    test grouping
    new unit tests
    update documentation

-----
    

tw2.sqla
    DbFormPage
        avoid hardcoded id
        robust against bad id
        unit test

    DbSelectionField
        Tidy up - make available for all selectionfields (relies on selection refactor)
        unit test

    avoid elixir dependency
        add "tests_depends"

    transactional_session - do a sys.argv check???

    later:
        efficiency concerns with saving M:M
            http://groups.google.com/group/sqlalchemy/browse_thread/thread/fa5df9a15b27e877
        cacheing DbSelectionField        
        eager loader?
            only a major concern if there are multiple levels of repeater
        dbselection - more complex arrangements, e.g. TargetVulns

    add database support to:
        FilteringGrid
        OtherSingleSelectField
        AjaxLookup

    schema evolution - migrate
        migrate seems to have come to life again!



http://groups.google.com/group/turbogears-trunk/browse_thread/thread/3b3fff3dadd0b1e5
    Paste XSS issue
    
http://groups.google.com/group/turbogears-trunk/browse_thread/thread/ec921035779324e9
    Genshi now unmaintained?!?


notes from tsrgen2
    tw2.forms: allow title to be a template    
    FormPage redirect - flexibility to include id
        deferred?
    


http://www.facebook.com/alteris.ian - doing exactly the kind of work I'm interested in



tw2.core
    Label("mylabel", label_text=Markup("<a href='http://www.google.com'>Google</a>"))
    make pkg_resources a soft dependency
    csrf protection
    avoid so many subclasses being created - inplace addition of parent (but this is harder than I thought)
    detect attempts to modify a widget instance and raise exception
    params - find a neater way to break param descriptions across lines
    i18n - where to call it?
    use quotes in all exceptions, also inclue widget id?
    logging - not much to log, but tw has some useful debug info
    Support "paste.filter_app_factory" entry point
    move attr generation to display? would make some other bits easier
    rename fetch_data to view_request? (also: post_define to define?)
    capitals for name2label - ID, IP, URL
    make resource injector work correctly with pylons cacheing
    nick more unit tests from tw1, e.g. leaks
    RepeatingWidget.rwbc is a bit of a hack - any improvements? may not be a problem, rarely need to call
    is the to_python/validate_python separation beneficial?

tw2.forms
    stop label names being post-to-able
    booleanradiobuttonlist
        instead? twf.RadioButtonTable(options=twf.BooleanOptions)
    make selection_list and selection_table support grouping
    make selection table configurable how it arranges (horiz/vert)
    named buttons
    TableForm - make TableLayout parameters accessible?
    SSF - do adding an empty row, at post_define time, when possible
    datagrid
        you can do pretty well with GridLayout and LabelField - is this necessary?
    select fields - strong validation

validation
    client-side
    inheriting required

run the w3c validator on all the widgets

widget browser
    more detail - need tabs (no ajax to start with)
        Summary / Demo Source / Parameters / Source / Template
    sphinx integration

controllers
    security
    switcher

template
    inline templates
    disable kid's doctype header on inner widgets
    only test engines that are installed
    pass config to templates
        absolute paths (e.g. genshi_abs)
        output format
        safe vars
        extra vars
        -> to do a proper job of this, I have to find out what the options are for each template engine
    template optimiser

resources
    optimisation - use Diez's work
    paste command to grab resources, for serving with a web server
    'afterwidget' as a location?

new widgets
    jquery
    popup links

dynforms
    dyndemo
    cascading
        this is where I need to think about ajax properly, which needs client validation
        There's some general things for all ajax requests
            extra - siblings (parent?) of this widget, include value in req

    look at js libs first
        filtering grid
        hiding button

    growing
        growing repeater
            putting numbers in legends
        calling a js func to initialise a widget
            need to hook this for growing
        make it not depend on customisedform

    growingtextarea
    text field with suggestion
    wymeditor?
    customisedform - save prompt
    HidingComponentMixin - has JS optimisation that should be on general resources
    Consider HidingComponent, CascadingComponent as a display-only widget
    text input mask - http://deformdemo.repoze.org/text_input_masks/


frameworks
    pylons
    tg2 - basically working
    cp3
    repoze.bfg
    django


http://www.mongodb.org/

yui
    use percious approach for multiple lib versions
    allow multiple DataSource widgets on one page
    move script out of templates - just use PlainWidget for most of them
        this depends a lot on the growing work

    rename options? it clashes with SelectionField.options
    autocomplete: experiment with force_select
    container - dialogs, tooltips
    Menu
    Paginator
    ImageCropper
    carousel - picking images
    Resize
    YUI CSS base

calling super classes can get messy 
    if you copy and paste a method, have to change super calls
    doesn't work neatly for a class defined inline
    -> solution is Python 3

Later
    Remove RadioButton? Is there any use case?    
    LabelField - should have a version without the hiddenfield, for efficiency
    Analyse the generated HTML and check for unnecessary bits, e.g. error spans on non-input fields



class OtherSingleSelectField(twc.CompoundWidget, HidingContainerMixin):
    """A SingleSelectField that has "Other" as an option. If a user selects "Other", they are prompted to enter a text string. Users of the widget must define a :meth:`create_code` method that takes the user-supplied text, and allocates a new code."""
    template = "genshi:tw2.dynforms.templates.other_select_field"

    # TBD:
    #other_validator = twc.Param('The validator to use for text entered in the "please specify" box.')

    other_code = twc.Param('The code used for "other"; occasionally you may need to override the default to avoid a clash with a valid value.', default=10000)
    other_text = twc.Param('The text string display for the "other" choice.', default='Other')
    specify_text = twc.Param('The text string display to prompt for a text value.', default='Please specify:')
    options = twc.Param('Options to be displayed', default=[])

    children = [
        HidingSingleSelectField(id='select', mapping = {}, options=[]), # TBD
        twf.TextField(id='other'),
    ]        

    @classmethod
    def post_define(cls):
        1 #cls.options.append((cls.other_code, cls.other_text))
        #cls.children[0].mapping = {cls.other_code: ['other']}

    def prepare(self):
        self.c.select.value = self.value
        self.c.select.options = self.options

