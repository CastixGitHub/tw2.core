tw2.core
    docs
        explain global_config/middleware, etc
        explain the order things happen - building attrs, registering resources, etc.
    children_deep
        grandchild hiding
    compatibility
        id as default param to Widget.__new__
        value as default to display
        widget.__call__
    refactor resources even more - avoid need to do parent=self.__class__ when adding dynamically
        inject() - in TW2, we use it to inject javascript only widgets in the wsgi stream.
    quickstart - autodetect package from "tw2.package"
    problem with colons as id separator - doesn't work in css, it thinks they're pseudo classes
        configurable compound id separator - relies on global config
    resources - caching
        I can generate expires/max-age, but it doesn't make it cache
        make the static file server support http 1.1 stuff like if-modified-since
            http://pythonpaste.org/modules/fileapp.html
    the "extra children" thing for datasrc (and submit) - avoid reserved_names
    resource link auto module name
        sys._getframe(1).f_globals['__name__']
        have to be careful not to interfere with the absolute path stuff
    dev server
        auto reload - need to run interpreter in subprocess (see paster serve)
        swing over examples
    support python 2.4 and 2.6
        2.4
            if all(number_re.match(k) for k in v):
            TypeError: super() argument 1 must be type, not classobj
        2.6
            Looks fine, deprecation warnings in nose/cheetah
            Check widget browser
    auto-registering controllers
        rewrite class name like elixir does

validation
    default validator should decode unicode
    MatchField - relies on state
    selection validators
        Better required messages - "Select a value"
        shouldn't have item_validator on SingleSelectField???
        auto - or a redesign to always store strings could remove the need
    FormEncode validators and required CSS
    global config for encoding

documentation
    forms
        getting started
            with wsgi
            standalone
        tutorials
            appearance
                better genshi abs path thingy
            validation
            elixir
    shouldn't have removed release.py - it shares details between doc and setup.py
        is there a standard approach for this?

widget browser
    make tw.core neat
    support rst
        tsrweb has one approach; maybe sphinx has a better way?
    validators __repr__ better
    tw branding
    validators - messages

tw2.dynforms
    OtherSingleSelectField
    unique column in growinggrid
    make onload trigger onchange

yui
    data table
